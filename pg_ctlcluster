#!/usr/bin/perl -wT

# multiversion/cluster aware pg_ctl wrapper; this also supplies the correct
# configuration parameters to 'start', and makes sure that a postmaster really
# stops on 'stop'.
#
# (C) 2005-2009 Martin Pitt <mpitt@debian.org>
# (C) 2009 Cyril Bouthors <cyril@bouthors.org>
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.

use lib '/usr/share/postgresql-common';
use Getopt::Long;
use POSIX qw/setsid dup2 setlocale LC_ALL :sys_wait_h/;
use PgCommon;
use Fcntl 'SEEK_SET';

# Check for known broken configurations of this cluster
sub check_valid_config {
    my %postgresql_conf = read_cluster_conf_file $version, $cluster,
        'postgresql.conf';
    my $log_statement_stats = config_bool $postgresql_conf{'log_statement_stats'};
    my $log_parser_stats = config_bool $postgresql_conf{'log_parser_stats'};
    my $log_planner_stats = config_bool $postgresql_conf{'log_planner_stats'};
    my $log_executor_stats = config_bool $postgresql_conf{'log_executor_stats'};

    # statement and other statistics are mutually exclusive
    if ($log_statement_stats && ($log_parser_stats || $log_planner_stats ||
	$log_executor_stats)) {
	error 'invalid postgresql.conf: log_statement_stats and the other log_*_stats options are mutually exclusive';
    }
}

# Return the PID from an existing PID file or undef if it does not exist.
# Arguments: <pid file path>
sub get_running_pid {
    return undef unless -e $_[0];

    if (open PIDFILE, $_[0]) {
	my $pid = <PIDFILE>;
	close PIDFILE;
        chomp $pid;
        ($pid) = $pid =~ /^(\d+)\s*$/; # untaint
	return $pid;
    } else {
	return undef;
    }
}

# If a pid file is already present, delete it if it is stale/invalid, or exit
# with a notice if it belongs to an already running postmaster.
sub start_check_pid_file {
    my $pidfile = $info{'pgdata'}.'/postmaster.pid';
    if (PgCommon::check_pidfile_running $pidfile) {
        print "Cluster is already running.\n";
        exit 2;
    }

    # Remove invalid or stale PID file
    if (-e $pidfile) {
	unlink $pidfile;
	print "Removed stale pid file.\n";
    }
}

# Check if a pid file is not present or it is invalid. If so, clean up/abort.
sub stop_check_pid_file {
    my $pidfile = $info{'pgdata'}.'/postmaster.pid';
    my $pid = get_running_pid $pidfile;
    return if (defined $pid && PgCommon::check_pidfile_running $pidfile); 
    if ($info{'running'}) {
	error 'pid file is invalid, please manually kill the stale server process.';
    }

    # Remove invalid or stale PID file
    if (-e $pidfile) {
	unlink $pidfile;
	print "Removed stale pid file.\n";
    }
    print "Cluster is not running.\n";
    exit 2;
}

# check if a cluster reliably connects or fails
# Arguments: <version> <cluster> <port> <socket dir>
sub cluster_port_ready {
    my ($v, $c, $p, $sd) = @_;
    my $psql = get_program_path 'psql', $v;
    error 'cluster_port_ready: could not find psql binary' unless $psql;
    my $n = 0;
    my $result = 0;


    # probe until we get three successful or failed connections in a row
    $ENV{'PGPASSWORD'} = 'foo'; # prevent hangs if superuser cannot connect withouth password
    my $out;
    while ($n < ($result ? 10 : 3)) {
        select undef, undef, undef, 0.5;
        $out = `$psql -h '$sd' --port $p -l 2>&1 >/dev/null`;

        if ($? == $result) {    
            $n++;
        } else {
            $n = 0;
        }
        $result = $?;
    }

    if ($out =~ 'FATAL:') {
	print STDERR "WARNING: connection to the database failed, disabling startup checks:\n$out\n";
	return cluster_port_running $v, $c, $p;
    }
    return !$result;
}

sub start {
    my $cdir = $info{'configdir'};

    check_valid_config;

    start_check_pid_file;

    # check conflicting port
    if (cluster_port_running $version, $cluster, $info{'port'}) {
        my $sockdir = get_cluster_socketdir $version, $cluster;
        error("Port conflict: another instance is already running on $sockdir with port $info{'port'}");
    }

    # prepare environment
    %ENV = read_cluster_conf_file $version, $cluster, 'environment';

    my $postmaster_opts = '';
    if (!(PgCommon::get_conf_value $version, $cluster, 'postgresql.conf', 'unix_socket_directory')) {
	$postmaster_opts .= '-c unix_socket_directory="' . $info{'socketdir'} . '"';
    }

    $postmaster_opts .= " -c config_file=\"$cdir/postgresql.conf\""; 
    if (!(PgCommon::get_conf_value $version, $cluster, 'postgresql.conf', 'hba_file')) {
        $postmaster_opts .= " -c hba_file=\"$cdir/pg_hba.conf\"";
    }
    if (!(PgCommon::get_conf_value $version, $cluster, 'postgresql.conf', 'ident_file')) {
        $postmaster_opts .= " -c ident_file=\"$cdir/pg_ident.conf\""; 
    }

    if ((-d '/var/run/postgresql') && !defined (PgCommon::get_conf_value $version, $cluster, 'postgresql.conf', 'external_pid_file')) {
        # check whether /var/run/postgresql/ is writeable as the cluster owner
        my $vrp_writable;
        if ($> == 0) {
            change_ugid $info{'owneruid'}, $info{'ownergid'};
            $vrp_writable = -w '/var/run/postgresql';
            $< = $> = 0;
            $( = $) = 0;
        } else {
            $vrp_writable = -w '/var/run/postgresql';
        }
        if ($vrp_writable) {
            $postmaster_opts .= " -c external_pid_file=\"/var/run/postgresql/$version-$cluster.pid\"";
        }
    }

    $postmaster_opts .= ' ' . (join ' ', @postmaster_auxoptions);
    ($postmaster_opts) = $postmaster_opts =~ /(.*)/; # untaint

    # only supply or default logfile path when none is given explicitly in
    # postgresql.conf
    @options = ($pg_ctl, 'start', '-D', $info{'pgdata'});
    $logsize = 0;
    if ($info{'logfile'}) {
        push @options, ('-l', $info{'logfile'});
        # remember current size of the log
        $logsize = (stat $info{'logfile'})[7];
    }

    push @options, @pg_ctl_opts_from_cli if @pg_ctl_opts_from_cli;

    my %pg_ctl_opts_from_file = read_cluster_conf_file $version, $cluster, 'pg_ctl.conf';
    push @options, split(' ', $pg_ctl_opts_from_file{'pg_ctl_options'})
	if defined $pg_ctl_opts_from_file{'pg_ctl_options'} and $pg_ctl_opts_from_file{'pg_ctl_options'} ne '';

    push @options, ('-s', '-o', $postmaster_opts);

    if (fork) {
        wait;
        error "could not exec $pg_ctl @options: $!" if $?;
    } else {
        setsid or error "could not start session: $!";
	# without this, you'll get zombies on startup
        dup2(POSIX::open('/dev/null', POSIX::O_WRONLY), 1);
        dup2(POSIX::open('/dev/null', POSIX::O_WRONLY), 2);
        exec $pg_ctl @options or error "could not exec $pg_ctl @options: $!";
    }

    # wait a bit until the socket exists
    $success = 0;
    $currlogsize = 0;
    my $pidfile = $info{'pgdata'}.'/postmaster.pid';
    for (my $attempt = 0; $attempt < 60; $attempt++) {
        select (undef, undef, undef, 0.5);
        $currlogsize = (stat $info{'logfile'})[7] if $info{'logfile'} && -r $info{'logfile'};
        if (cluster_port_running $version, $cluster, $info{'port'}) {
            $success = 1;
            last;
        }

        # if the postmaster wrote something, but the process does not exist any
        # more, there must be a problem and we can stop immediately
        last if ($currlogsize > $logsize && !PgCommon::check_pidfile_running $pidfile);
    }

    # OK, the server runs, now wait until it stabilized
    if ($success) {
	$success = cluster_port_ready $version, $cluster, $info{'port'}, $info{'socketdir'};
    }

    if (!$success) {
        if ($currlogsize) {
            print STDERR "The PostgreSQL server failed to start. Please check the log output:\n";
            open LOG, $info{'logfile'} or 
                error "Could not open log file " . $info{'logfile'};
            seek LOG, $logsize, SEEK_SET;
            print STDERR $_ while <LOG>;
        } else {
            print STDERR "The PostgreSQL server failed to start. Please check the log output.\n";
        }
        exit 1;
    }

    return 0;
}

sub stop {
    stop_check_pid_file;
    my $result = 1;

    if ($force) {
        if (!fork()) {
            close STDOUT;
            exec $pg_ctl, '-D', $info{'pgdata'}, '-s', '-w', '-m', 'fast', @pg_ctl_opts_from_cli, 'stop';
        } else {
            wait;
	    $result = $? >> 8;
        }

        # try harder if "fast" mode does not work
        if (-f $info{'pgdata'}.'/postmaster.pid') {
            print "(does not shutdown gracefully, now stopping immediately)\n";
	    $result = system $pg_ctl, '-D', $info{'pgdata'}, '-s', '-w', '-m', 'immediate', @pg_ctl_opts_from_cli, 'stop';
        }

        # if that still not helps, use the big hammer
        if (-f $info{'pgdata'}.'/postmaster.pid') {
            print "(does not shutdown, killing the process)";
            $pid = get_running_pid $info{'pgdata'}.'/postmaster.pid';
            kill (9, $pid) if $pid;
	    $result = 0;
        }
    } else {
        if (!fork()) {
            close STDOUT;
            exec $pg_ctl, '-D', $info{'pgdata'}, '-s', '-w', @pg_ctl_opts_from_cli, 'stop'; 
        } else {
            wait;
	    $result = $? >> 8;
        }
    }

    # external_pid_file files are currently not removed by postmaster itself
    if ($result == 0) {
	unlink "/var/run/postgresql/$version-$cluster.pid";
    }

    return $result;
}

sub restart {
    my $result;

    if ($info{'running'}) {
	$result = stop;
	return $result if $result;
    }
    return start;
}

sub reload {
    exec $pg_ctl, '-D', $info{'pgdata'}, '-s', @pg_ctl_opts_from_cli, 'reload';
}

sub promote {
    exec $pg_ctl, '-D', $info{'pgdata'}, '-s', @pg_ctl_opts_from_cli, 'promote';
}

#
# main
#

exit 1 unless GetOptions ('o|options=s' => \@postmaster_auxoptions,
    'f|force' => \$force);

if ($#ARGV < 2) {
    print "Usage: $0 <version> <cluster> <action>\n";
    exit 1;
}

$version = shift @ARGV;
$cluster = shift @ARGV;
$action = shift @ARGV;

@pg_ctl_opts_from_cli=();
foreach my $argv (@ARGV) {
    push @pg_ctl_opts_from_cli, $argv =~ /(.*)/; # untaint
}

($version) = $version =~ /^(\d+\.\d+)$/; # untaint
($cluster) = $cluster =~ /^([^'"\s]+)$/; # untaint
error 'specified cluster does not exist' unless $version && $cluster && cluster_exists $version, $cluster;
%info = cluster_info ($version, $cluster);

unless ($action eq 'stop') {
    error 'Cluster is disabled' if $info{'start'} eq 'disabled';
}

# untaint environment
$ENV{'PATH'} = '/sbin:/bin:/usr/sbin:/usr/bin';
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

unless (-d $info{'pgdata'} && defined $info{'owneruid'}) {
    error $info{'pgdata'} . ' is not accessible or does not exist';
}

# check that owner uig/gid is valid
unless (getpwuid $info{'owneruid'}) {
    error 'The cluster is owned by user id '.$info{'owneruid'}.' which does not exist any more'
}
unless (getgrgid $info{'ownergid'}) {
    error 'The cluster is owned by group id '.$info{'ownergid'}.' which does not exist any more'
}

# recreate missing log file
if ($info{'logfile'} && ! -e $info{'logfile'}) {
    open L, '>', $info{'logfile'} or 
	error 'Could not create log file ' . $info{'logfile'};
    chmod 0640, $info{'logfile'};
    my $g;
    if ($info{'owneruid'} < 500) {
	$g = (getgrnam 'adm')[2];
    } else {
	$g = $info{'ownergid'};
    }
    chown $info{'owneruid'}, $g, $info{'logfile'};
    close L;
}

if ($> == 0) {
    # have the postmaster start with increased OOM killer protection; 9.1 and
    # later has builtin support for resetting the adjustment of child processes
    if ($action eq 'start' && $version ge '9.1') {
        if (-w '/proc/self/oom_score_adj') {
	    open F, '>/proc/self/oom_score_adj';
	    print F "-900\n";
	    close F;
	} elsif (-w '/proc/self/oom_adj') {
	    open F, '>/proc/self/oom_adj';
	    print F "-16\n";
	    close F;
	}
    }

    chdir ('/var/lib/postgresql');
    change_ugid $info{'owneruid'}, $info{'ownergid'};
}

if( $> != $info{'owneruid'} ) {
    error 'You must run this program as the cluster owner ('.
        (getpwuid $info{'owneruid'})[0].')';
}

$pg_ctl = get_program_path 'pg_ctl', $version;

%actions = ('start' => \&start, 'stop' => \&stop, 'reload' => \&reload,
            'restart' => \&restart, 'promote' => \&promote);

if ($actions{$action}) {
    exit $actions{$action}->();
} else {
    error 'Error: invalid action (must be one of: '.
        (join ', ', sort keys %actions) . ')';
}

__END__

=head1 NAME

pg_ctlcluster - start/stop/restart/reload a PostgreSQL cluster

=head1 SYNOPSIS

B<pg_ctlcluster> [I<options>] I<cluster-version> I<cluster-name> I<action> B<--> [I<pg_ctl options>]

where I<action> = B<start>|B<stop>|B<restart>|B<reload>|B<promote>

=head1 DESCRIPTION

This program controls the B<postmaster> server for a particular cluster. It
essentially wraps the L<pg_ctl(1)> command. It determines the cluster version
and data path and calls the right version of B<pg_ctl> with appropriate
configuration parameters and paths.

You have to start this program as the user who owns the database cluster or as
root.

=head1 ACTIONS

=over 4

=item B<start>

A log file for this specific cluster is created if it does not exist yet (by
default,
C</var/log/postgresql/postgresql->I<cluster-version>C<->I<cluster-name>C<.log>),
and a PostreSQL server process (L<postmaster(1)>) is started on it. Exits with
0 on success, with 2 if the server is already running, and with 1 on other
failure conditions.

=item B<stop>

Stops the L<postmaster(1)> server of the given cluster. By default, "smart"
mode is used, which waits until all clients disconnected.

With the B<--force> option the "fast" mode is used which rolls back all active
transactions, disconnects clients immediately and thus shuts down cleanly. If
that does not work, shutdown is attempted again in "immediate" mode, which can
leave the cluster in an inconsistent state and thus will lead to a recovery run
at the next start. If this still does not help, the B<postmaster> process is
killed.  Exits with 0 on success, with 2 if the server is not running, and with
1 on other failure conditions. This mode should only be used when the machine
is about to be shut down.

=item B<restart>

Stops the server if it is running and starts it (again).

=item B<reload>

Causes the configuration files to be re-read without a full shutdown of the
server.

=item B<promote>

Commands a running standby server to exit recovery and begin read-write
operations.

=back

=head1 OPTIONS

=over 4

=item B<-o> I<option>

Pass given I<option> as command line option to the C<postmaster> process. It is
possible to specify B<-o> multiple times. See L<postmaster(1)> for a
description of valid options.

=item I<pg_ctl options>

Pass given I<pg_ctl options> as command line options to pg_ctl. See L<pg_ctl(1)>
for a description of valid options.

=back

=head1 FILES

=over 4

=item C</etc/postgresql/>I<cluster-version>C</>I<cluster-name>C</pg_ctl.conf>

This configuration file contains cluster specific options to be passed to
L<pg_ctl(1)>.

=back

=head1 SEE ALSO

L<pg_ctl(1)>, L<pg_wrapper(1)>, L<pg_lsclusters(1)>, L<postmaster(1)>

=head1 AUTHOR

Martin Pitt L<E<lt>mpitt@debian.orgE<gt>>

