#!/usr/bin/perl -wT
# Show all PostgreSQL clusters in a list
#
# (C) 2005-2009 Martin Pitt <mpitt@debian.org>
# (C) 2013-2015 Christoph Berg <myon@debian.org>
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.

use strict;
use warnings;
use PgCommon;
use Getopt::Long;
use Time::HiRes qw(usleep);

my ($no_header, $wait_stop);
exit 1 unless GetOptions (
    'h|no-header' => \$no_header,
    'wait-stopping' => \$wait_stop,
);

if ($wait_stop) {
    my $waiting = 0;

    # collect list of running "auto" clusters
    my %clusters = ();
    foreach my $v (get_versions()) {
        foreach my $c (get_version_clusters $v) {
            my %info = cluster_info $v, $c;
            next unless ($info{start} eq 'auto');
            next unless ($info{running});
            $clusters{$v}->{$c} = 1;
            $waiting = 1; # there is a cluster to wait for
        }
    }

    my $sleep = 100_000; # initial delay 0.1s
    do {
        $waiting = 0;
        # wait for all running clusters to stop
        foreach my $v (keys %clusters) {
            foreach my $c (keys %{$clusters{$v}}) {
                my %info = cluster_info $v, $c;
                if ($info{running}) {
                    print "Waiting $sleep for $v $c to shut down ...\n";
                    usleep $sleep;
                    $sleep *= 1.5;
                    $waiting = 1;
                } else {
                    delete $clusters{$v}->{$c};
                }
            }
        }
    } while ($waiting and $sleep < 30_000_000);
}

my @lines;
push @lines, ['Ver', 'Cluster', 'Port', 'Status', 'Owner', 'Data directory', 'Log file']
    unless ($no_header);

foreach my $v (sort (get_versions())) {
    my @clusters = get_version_clusters $v;
    foreach my $c (sort @clusters) {
        my %info = cluster_info $v, $c;
        my $logfile = $info{logfile}; # default logfile in /var/log/postgresql
        if (config_bool ($info{logging_collector})) {
            my $path = $info{log_directory} || 'pg_log';
            my $file = $info{log_filename} || 'postgresql-%Y-%m-%d_%H%M%S.log';
            $logfile = "$path/$file";
        }
        my $destination = $info{log_destination} || 'stderr';
        $destination =~ s/stderr/$logfile/;
        my $csvlog = $logfile;
        $csvlog =~ s/(?:\.log)?$/.csv/;
        $destination =~ s/csvlog/$csvlog/;

        push @lines, [$v, $c, $info{'port'},
            ($info{'running'} ? "online" : "down") . ($info{'recovery'} ? ",recovery" : ""),
            defined $info{'owneruid'} ? (getpwuid $info{'owneruid'})[0] : '<unknown>',
            $info{'pgdata'} || '<not set>', $destination];
    }
}

my @colwidth = qw(1 1 1 1 1 1 1);
foreach my $line (@lines) {
    for (my $i = 0; $i < @$line - 1; $i++) { # skip adjustment for last column
        my $len = length @$line[$i];
        $colwidth[$i] = $len if ($len > $colwidth[$i]);
    }
}

my $color = -t 1; # color output if stdout is a terminal
my $fmtstring = join ' ', map { "%-${_}s" } @colwidth;

foreach my $line (@lines) {
    if ($color and $line->[3] =~ /online/) {
        print "\033[32m"; # green
    } elsif ($color and $line->[3] =~ /down/) {
        print "\033[31m"; # red
    }
    printf "$fmtstring\n", @$line;
}

if ($color) {
    print "\033[0m"; # reset terminal
}

__END__

=head1 NAME

pg_lsclusters - show information about all PostgreSQL clusters

=head1 SYNOPSIS

B<pg_lsclusters> [I<options>]

=head1 DESCRIPTION

This command shows a list about the configuration and status of all clusters.

=head1 OPTIONS

=over 4

=item B<-h>, B<--no-header>

Do not print the column header line.

=back

=head1 NOTES

The cluster status is shown as B<online> or B<down>. If a F<recovery.conf> file
is found in the data directory, B<,recovery> is appended. The latter needs read
access to the data directory, which only root and the cluster owner have.

The output lines are colored green and red to indicate the cluster status
visually.

=head1 AUTHOR

Martin Pitt L<E<lt>mpitt@debian.orgE<gt>>
